<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
<!--         xmlns="http:/xmlns.jcp.org/xml/ns/javaee"-->
<!--         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="4.0">-->

<web-app matadata-complete="true">
  <display-name>FirsetServlet</display-name>
<!--  <default-context-path></default-context-path> 设置应用程序环境路径，出于兼容性考虑，容器厂商可能不会例会这个设定-->

  <!-- welcome-file-list-->
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>01 编写与设置servlet.md</welcome-file>
  </welcome-file-list>

  <!--  绝对排序-->
<!--  <absolute-ordering>-->
<!--    <name>WebFragment1</name>-->
<!--    <name>WebFragment2</name>-->
<!--  </absolute-ordering>-->

  <!--  Servlet4.0 开始，-->
  <!--  可以用<request-characet-encoding>标签处理整个应用程序的请求(体)编码，（URI编码是HTTP服务器处理，不是由容器处理）&ndash;&gt;-->
  <!--  可以用<response-characet-encoding>标签处理整个应用程序的响应编码，（URI编码是HTTP服务器处理，不是由容器处理）&ndash;&gt;-->
  <request-characet-encoding>UTF-8</request-characet-encoding>
  <response-characet-encoding>UTF-8</response-characet-encoding>

  <!-- 可以在web.xml中设置默认的区域和编码对应，如果用setLocale(locale)设置响应标头Content-Language, 那么就会使用对应的字符编码处理响应数据-->
  <locale-encoding-mapping-list>
    <locale-encoding>
      <locae>zh_TW</locae>
      <encoding>UTF-8</encoding>
    </locale-encoding>
  </locale-encoding-mapping-list>

<!--  可以在web.xml设置MIME类型与后缀对应，那么ServletContext对象的getMimeType(String fielname)就能文件名的后缀以及后缀对应获得MIME类型-->
  <mime-mapping>
    <extension>pdf</extension>
    <mime-type>application/pdf</mime-type>
  </mime-mapping>

  <!--web.xml中的设定可用来覆盖Servlet中标注-->

  <!--使用和配置Servlet-->
  <servlet>
    <servlet-name>Hello</servlet-name>
    <servlet-class>mortal.learn.dev.web.servlet.learn01codingandconfig.Hello</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>Hello</servlet-name>
    <url-pattern>/helloUser</url-pattern>
  </servlet-mapping>
  <!-- Servlet3.0以后，Part对象处理文件，要添加注解@MultipartConfig, 可以在web.xml中配置这个注解的属性-->
<!--  <servlet>-->
<!--    <servlet-name>UploadServlet</servlet-name>-->
<!--    <servlet-class>org.example.UploadServlet</servlet-class>-->
<!--    <multipart-config>-->
<!--      <file-size-threshold>100</file-size-threshold>-->
<!--      <location>C:/Workspace</location>-->
<!--      <max-file-size>1000</max-file-size>-->
<!--      <max-request-size>10</max-request-size>-->
<!--    </multipart-config>-->
<!--  </servlet>-->


  <servlet>
    <servlet-name>Path</servlet-name>
    <servlet-class>mortal.learn.dev.web.servlet.learn01codingandconfig.Path</servlet-class>
    <load-on-startup>2</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>Path</servlet-name>
    <url-pattern>/path</url-pattern>
  </servlet-mapping>

  <servlet>
    <servlet-name>Mapping</servlet-name>
    <servlet-class>mortal.learn.dev.web.servlet.learn01codingandconfig.Mapping</servlet-class>
    <load-on-startup>3</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>Mapping</servlet-name>
    <url-pattern>/mapping/*</url-pattern>
  </servlet-mapping>

</web-app>
